// Code generated by mockery v1.0.0. DO NOT EDIT.

package contractregistrymocks

import (
	contractregistry "github.com/hyperledger/firefly-ethconnect/internal/contractregistry"
	messages "github.com/hyperledger/firefly-ethconnect/internal/messages"

	mock "github.com/stretchr/testify/mock"
)

// RemoteRegistry is an autogenerated mock type for the RemoteRegistry type
type RemoteRegistry struct {
	mock.Mock
}

// Close provides a mock function with given fields:
func (_m *RemoteRegistry) Close() {
	_m.Called()
}

// Init provides a mock function with given fields:
func (_m *RemoteRegistry) Init() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// LoadFactoryForGateway provides a mock function with given fields: lookupStr, refresh
func (_m *RemoteRegistry) LoadFactoryForGateway(lookupStr string, refresh bool) (*messages.DeployContract, error) {
	ret := _m.Called(lookupStr, refresh)

	var r0 *messages.DeployContract
	if rf, ok := ret.Get(0).(func(string, bool) *messages.DeployContract); ok {
		r0 = rf(lookupStr, refresh)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*messages.DeployContract)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, bool) error); ok {
		r1 = rf(lookupStr, refresh)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LoadFactoryForInstance provides a mock function with given fields: lookupStr, refresh
func (_m *RemoteRegistry) LoadFactoryForInstance(lookupStr string, refresh bool) (*contractregistry.DeployContractWithAddress, error) {
	ret := _m.Called(lookupStr, refresh)

	var r0 *contractregistry.DeployContractWithAddress
	if rf, ok := ret.Get(0).(func(string, bool) *contractregistry.DeployContractWithAddress); ok {
		r0 = rf(lookupStr, refresh)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*contractregistry.DeployContractWithAddress)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, bool) error); ok {
		r1 = rf(lookupStr, refresh)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RegisterInstance provides a mock function with given fields: lookupStr, address
func (_m *RemoteRegistry) RegisterInstance(lookupStr string, address string) error {
	ret := _m.Called(lookupStr, address)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(lookupStr, address)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
