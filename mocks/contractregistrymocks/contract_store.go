// Code generated by mockery v1.0.0. DO NOT EDIT.

package contractregistrymocks

import (
	contractregistry "github.com/hyperledger/firefly-ethconnect/internal/contractregistry"
	messages "github.com/hyperledger/firefly-ethconnect/internal/messages"

	mock "github.com/stretchr/testify/mock"

	time "time"
)

// ContractStore is an autogenerated mock type for the ContractStore type
type ContractStore struct {
	mock.Mock
}

// AddABI provides a mock function with given fields: id, deployMsg, createdTime
func (_m *ContractStore) AddABI(id string, deployMsg *messages.DeployContract, createdTime time.Time) *contractregistry.ABIInfo {
	ret := _m.Called(id, deployMsg, createdTime)

	var r0 *contractregistry.ABIInfo
	if rf, ok := ret.Get(0).(func(string, *messages.DeployContract, time.Time) *contractregistry.ABIInfo); ok {
		r0 = rf(id, deployMsg, createdTime)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*contractregistry.ABIInfo)
		}
	}

	return r0
}

// AddContract provides a mock function with given fields: addrHexNo0x, abiID, pathName, registerAs
func (_m *ContractStore) AddContract(addrHexNo0x string, abiID string, pathName string, registerAs string) (*contractregistry.ContractInfo, error) {
	ret := _m.Called(addrHexNo0x, abiID, pathName, registerAs)

	var r0 *contractregistry.ContractInfo
	if rf, ok := ret.Get(0).(func(string, string, string, string) *contractregistry.ContractInfo); ok {
		r0 = rf(addrHexNo0x, abiID, pathName, registerAs)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*contractregistry.ContractInfo)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string, string, string) error); ok {
		r1 = rf(addrHexNo0x, abiID, pathName, registerAs)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CheckNameAvailable provides a mock function with given fields: name, isRemote
func (_m *ContractStore) CheckNameAvailable(name string, isRemote bool) error {
	ret := _m.Called(name, isRemote)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, bool) error); ok {
		r0 = rf(name, isRemote)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetABIByID provides a mock function with given fields: abi
func (_m *ContractStore) GetABIByID(abi string) (*messages.DeployContract, *contractregistry.ABIInfo, error) {
	ret := _m.Called(abi)

	var r0 *messages.DeployContract
	if rf, ok := ret.Get(0).(func(string) *messages.DeployContract); ok {
		r0 = rf(abi)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*messages.DeployContract)
		}
	}

	var r1 *contractregistry.ABIInfo
	if rf, ok := ret.Get(1).(func(string) *contractregistry.ABIInfo); ok {
		r1 = rf(abi)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*contractregistry.ABIInfo)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(string) error); ok {
		r2 = rf(abi)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetContractByAddress provides a mock function with given fields: addrHex
func (_m *ContractStore) GetContractByAddress(addrHex string) (*contractregistry.ContractInfo, error) {
	ret := _m.Called(addrHex)

	var r0 *contractregistry.ContractInfo
	if rf, ok := ret.Get(0).(func(string) *contractregistry.ContractInfo); ok {
		r0 = rf(addrHex)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*contractregistry.ContractInfo)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(addrHex)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Init provides a mock function with given fields:
func (_m *ContractStore) Init() {
	_m.Called()
}

// ListABIs provides a mock function with given fields:
func (_m *ContractStore) ListABIs() []messages.TimeSortable {
	ret := _m.Called()

	var r0 []messages.TimeSortable
	if rf, ok := ret.Get(0).(func() []messages.TimeSortable); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]messages.TimeSortable)
		}
	}

	return r0
}

// ListContracts provides a mock function with given fields:
func (_m *ContractStore) ListContracts() []messages.TimeSortable {
	ret := _m.Called()

	var r0 []messages.TimeSortable
	if rf, ok := ret.Get(0).(func() []messages.TimeSortable); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]messages.TimeSortable)
		}
	}

	return r0
}

// ResolveContractAddress provides a mock function with given fields: registeredName
func (_m *ContractStore) ResolveContractAddress(registeredName string) (string, error) {
	ret := _m.Called(registeredName)

	var r0 string
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(registeredName)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(registeredName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
